\documentclass{article}

%\VignetteEngine{knitr::knitr}
%\VignetteIndexEntry{edge Package}

\usepackage{graphics}
\usepackage{amsmath}
\usepackage{fullpage}
\usepackage{bibentry}
\usepackage[parfill]{parskip}
\setlength{\parskip}{10pt}
%\usepackage{indentfirst}
\usepackage[colorlinks=true]{hyperref}
\usepackage[utf8]{inputenc}
\nobibliography*


\Sexpr{library(knitr); opts_chunk$set(tidy=TRUE, cache=TRUE, warning=FALSE, message=FALSE,fig.align='center')}

\begin{document}

<<foo,cache=FALSE,include=FALSE,echo=FALSE>>=
library(edge)
library(splines)
options(keep.source = TRUE, width = 48)
foo <- packageDescription("edge")
@

\title{Bioconductor's {\tt edge} package \\ Version \Sexpr{foo$Version}}
\author{John D. Storey and Andrew J. Bass \\ Princeton University \\ \url{http://genomine.org/contact.html}}
\maketitle
\tableofcontents
\newpage
\section{Introduction}

{\tt edge} is a package for significance analysis of DNA micro-array experiments and is able to identify genes that are deferentially expressed between two or more different biological conditions (e.g., healthy versus diseased tissue). There are a number of existing software packages that perform significance analysis but {\tt edge} can use the odp-statistic from the Optimal Discovery Procedure (ODP) for significance testing. Whereas previously existing methods employ statistics that are essentially designed for testing one gene at a time (e.g., t-statistics and F-statistics), the ODP uses information across all genes to test for differential expression. 

The improvements in power are substantial; Figure 1 shows a comparison between edge and five leading software packages, based on a well-known breast cancer expression study (Hedenfalk et al. 2001). In addition to identifying deferentially expressed genes, {\tt edge} includes implementations of popular packages such as {\tt snm}, {\tt sva} and {\tt qvalue}. 

\begin{figure}[ht]
\begin{center}
\includegraphics[scale=.50]{edgecomp.pdf}
\end{center}
\caption{Comparison of EDGE to various other leading methods for identifying differential expressed genes in the Hedenfalk et al., 2001 study. Figure retrieved from Leek et al. (2005).}
\label{fig:test}
\end{figure}

%There are three experimental designs where {\tt edge} can identify differentially expressed genes: static, time course and continuous response experiments. In a ``static sampling'' experiment, the arrays have been collected from distinct biological groups without respect to time. The goal is to identify genes that have a statistically significant difference in average expression across these distinct biological groups. The second type of experiment is a time course experiment, where the arrays have been sampled with respect to time from one or more distinct biological groups. If only one biological group has been sampled, then the goal is to identify genes that show ``within-class temporal differential expression'', i.e., genes that show statistically significant changes in expression over time. If two or more biological groups have been sampled, then the goal is to identify genes that show ``between-class temporal differential expression'', i.e., genes that show statistically significant differences in expression over time between the various groups. The third type of experiment is a ``continuous response'' design, which means that the arrays have been collected from a continuously defined biological state without respect to time. The goal here is to identify genes whose expression shows a statistically significant change with respect to this continuous response.
%\texttt{edge} uses methods that have been specifically designed for time course experiments because many things can go wrong when using traditional static analysis for time course experiments. Even though some significance analysis packages allow for users to enter information about time points, we have a rigorously developed set of methodology that was published in Storey et al. (2005b) that simplifies the process for time course experiments. All procedures implemented in the software are based on proven statistical procedures that have appeared in peer-reviewed articles. 

\section{Citing this package}

\bibentry{storey:2007}.

\bibentry{storey:etal:2007}.

\bibentry{woo:leek:storey:2011}.

\section{Getting help}
Hopefully most questions relating to the package will be answered in the vignette but to get a more detailed account of how to use the functions simply type within R:
<<help_qvalue>>=
help(package="edge")
@
\noindent Please contact the authors directly with any issues regarding bugs. Otherwise, any questions or problems implementing {\tt edge} will most efficiently be addressed on the Bioconductor mailing list, \url{http://stat.ethz.ch/mailman/listinfo/bioconductor}.

\section{Quick start guide}

Load all relevant data and use {\tt edgeModel} to create an {\tt edgeSet} object:
<<make_eSet, echo=TRUE>>=
library(edge)
data(kidney)
sex <- kidney$sex[kidney$tissue == "c"]
age <- kidney$age[kidney$tissue == "c"]
kidexpr <- log(kidney$kidexpr[, kidney$tissue == "c"] + 10)
edgeObj <- edgeModel(data=kidexpr, adj.var=model.matrix(~sex), tme=age, sampling="timecourse", basis.type="ncs", basis.df=4)
@

The alternative and null hypothesis are formulated by {\tt edgeModel}. The {\tt odp} or {\tt lrt} function can be used as follows:

<<quick_start_eSet, dependson="quick_start_eModel", eval=FALSE>>=
# Optimal Discovery Procedure
edgeODP <- odp(edgeObj)
# Likelihood Ratio Test
edgeLRT <- lrt(edgeObj)
@

The object {\tt edgeODP} and {\tt edgeLRT} contain a {\tt qvalue} object which is the main slot of interest that can accessed by the {\tt qvalue.obj} function. The following sections of the manual go through various case studies to show additional features of the {\tt edge} package.

\section{Objects in edge}
\subsection{edgeSet}
The main object in {\tt edge} is the {\tt edgeSet} object and it contains the following slots:
\begin{itemize}
\item {\tt full.model}: the alternative model of the experiment
\item {\tt null.model}: the null model of the experiment
\item {\tt full.matrix}: the alternative model in matrix form
\item {\tt null.matrix}: the null model in matrix form
\item {\tt individual}: containing information on individuals in the experiment
\item {\tt qvalue.obj}: {\tt qvalue} list
\item {\tt ExpressionSet}: inherits the slots from {\tt ExpressionSet} object
\end{itemize}
As an example of how to access and set the slots of an {\tt edgeObj} lets say we are interested in changing the alternative model to just include the variable {\tt cov}. The current models can be accessed by:
<<null_mod2, eval=FALSE>>=
nullModel(object)
fullModel(object)
@
A new alternative model can be set by
<<null_mod3, eval=FALSE>>=
fullModel(object) <- ~1 + cov
@
To get a summary of the object and all the slots use the {\tt summary} function:
<<sum0, eval=FALSE>>=
summary(object)
@
The package offers great flexibility in model choice and experimentation. See {\tt ?edgeSet} for more details on how to extract and set each slot in the object.

\subsection{edgeFit}

The function {\tt edgeFit} fits a linear model to each gene and returns that information in an {\tt edgeFit} object that contains the following slots:
\begin{itemize}
\item {\tt fit.full}: fitted values from the alternative model
\item {\tt fit.null}: fitted values from null model
\item {\tt res.full}: residuals from the alternative model
\item {\tt res.null}: residuals from the null model
\item {\tt dH.full}: diagonal elements in the projection matrix for the full model
\item {\tt beta.coef}: the coefficients for the full model
\item {\tt stat.type}: statistic type used, either ``odp'' or ``lrt''
\end{itemize}
To access the coefficients in the {\tt edgeFit} object:
<<betacoef, eval=FALSE>>=
betaCoef(object)
@
Similarly, to access the full and null residuals:
<<fres, eval=FALSE>>=
resFull(object)
resNull(object)
@

See {\tt ?edgeFit} for more details on how to extract and set each slot of the object.

\section{Examples}

Three examples will be used to show the functionality of {\tt edge}. 
In each example there will be a static, longitudinal and independent case study. It will become evident that in each case, the analysis procedure is similar and the only step that differs is the model setup.

There are three main steps when using {\tt edge}:
\begin{itemize}
\item Load experimental data. Optionally, create an {\tt ExpressionSet} object. 
\item Use {\tt edgeModel} to create an {\tt edgeSet} object. If an {\tt ExpressionSet} object is created use the {\tt edgeSet} function.
\item Use functions {\tt odp} or {\tt lrt} to obtain the q-value object which is the slot of interest. The {\tt edgeFit} function can be used to extract information regarding the model fits.  
\end{itemize}

\subsection{Independent time course study}
{\bfseries Step 1:} Gene expression measurements from kidney samples were obtained from 72 human subjects ranging in age from 27 to 92 years. Only one array was obtained per sample and the age and tissue type of each subject was recorded. 
To import the data:
<<import_data>>=
data(kidney)
names(kidney)
@
There are a few covariates in this data set: {\tt sex}, {\tt age}, {\tt tissue}, {\tt kidexpr} and {\tt kidcov}. We will focus on the expression values of the cortex {\tt tissue} samples:
<<crtx>>=
sex <- kidney$sex[kidney$tissue == "c"]
age <- kidney$age[kidney$tissue == "c"]
kidexpr <- log(kidney$kidexpr[, kidney$tissue == "c"] + 10)
@
The two main covariates of interest for this example are the {\tt sex} and {\tt age} covariates. The {\tt sex} variable is whether the subject was male or female and the {\tt age} variable is the age of the patients. Lets view a histogram of the {\tt age} to get a better idea of data:
<<hist,echo=FALSE, fig.width=6, fig.height=4>>=
library(ggplot2)
qplot(age)
@
From the histogram, it is important to keep in mind that a majority of the patients appear to be older than 50. 

{\bfseries Step 2:} Use the function {\tt edgeModel} to create an {\tt edgeSet} object:
<<edgeModel, dependson="crtx">>=
edgeObj <- edgeModel(data=kidexpr, adj.var=model.matrix(~sex), tme=age, sampling="timecourse", basis.type="ncs", basis.df=4)
@
Since the {\tt kidney} study is a time-course study the sampling method will be ``timecourse''. The adjustment variable in the study is {\tt sex} while the time variable is {\tt age}. A brief overview of the arguments of {\tt edgeModel}
\begin{itemize}
\item {\tt data} Matrix of expression values
\item {\tt adj.var} Adjustment variables (matrix)
\item {\tt tme} A vector containing the time variable in a time course study
\item {\tt sampling} Can either be ``timecourse'' or ``static'' depending on the experiment
\item {\tt basis.df} The degree of freedom for the spline basis
\item {\tt basis.type} A spline curve is fitted to the {\tt tme} variable in a ``timecourse'' study. The type can be ``ncs`` (B-spline for a natural cubic spline) or ``poly'' (B-spline for a polynomial spline)
\end{itemize}

Additional arguments can be viewed by typing {\tt ?edgeModel}. {\tt edgeSet} is the main object in the package and the slots can be viewed by:
<<edgeObjSlots>>=
slotNames(edgeObj)
@
The alternative and null models are automatically generated by {\tt edgemodel}. The alternative and null models can be accessed using 
<<altnullmod>>=
fullModel(edgeObj)
nullModel(edgeObj)
@
The {\tt adj.var} corresponds to the adjustment variables and {\tt time.basis} corresponds to the time variable inputed in {\tt edgeModel}. The key slot in {\tt edgeObj} is the {\tt qvalue.obj} which should be the only empty slot. The other slots are directly related to the input data and hypothesis models. See the section on the {\tt edgeSet} object for more details on these slots.

The {\tt summary} function summarizes the slots in the {\tt edgeSet} object:
<<sum, eval=TRUE>>=
summary(edgeObj)
@
\paragraph{Step 3:} Before running any significance analysis, lets view our model fits of the data. The {\tt edgeFit} function can be used to extract residuals and fitted values from the alternative and null models:
<<tmp2>>=
efObj <- edgeFit(edgeObj, stat.type="lrt")
@
The {\tt stat.type} argument specifies whether you want the {\tt odp} or {\tt lrt} fitted values. To access the alternative model fitted values:
<<altfit >>=
fitVals <- fitFull(efObj)
@
The fitted values of the first gene are shown below:
<<fig.height=4, fig.width=6, echo=FALSE>>=
library(ggplot2)
qplot(age, fitVals[1,], color=sex, ylab="expression")
@
We can see that with our alternative model chosen, the expression goes up and down as the kidney ages for this particular gene. Once other interesting genes have been inspected, the user can either use the function {\tt odp} or {\tt lrt} to get the {\tt qvalue} object. The {\tt lrt} function performs a likelihood ratio test to determine p-values. If the null distribution, {\tt nullDistn}, is calculated using ``bootstrap'' then residuals from the alternative model are re-sampled and added to the null model to simulate a distribution where there is no differential expression. Otherwise, the default input is ``normal'' and the assumption is that the data set follows an F-distribution. 

To use {\tt lrt} on the {\tt edgeSet} object:
<<kd_3, eval=TRUE, cache=FALSE,dependson="cr_edgeSet">>=
edgeLRT <- lrt(edgeObj, nullDistn="normal")
@

To view a summary of the object:
<<summ>>=
summary(edgeLRT)
@

The slot of interest for significance analysis is the {\tt qvalue.obj} slot. To access the slot:
<<qvalob>>=
qval <- qvalue.obj(edgeLRT)
@
To visualize the results, {\tt plot} or {\tt hist} functions can be used on {\tt qval}:
<<fig.width=6, fig.height=4>>=
plot(qval)
hist(qval)
@

The {\tt odp} function uses information across all tests when formulating the test statistic. In order to improve the speed of the algorithm, we utilize a k-means clustering algorithm where genes are assigned to a cluster based on the Kullback-Leiber distance. Each gene is assigned a module-average parameter to calculate the odp-statistic. The number of clusters can be adjusted by {\tt n.mods}. Type {\tt ?odp} for more details on the algorithm.

To use {\tt odp} on an {\tt edgeSet object}:
<<kd_2,eval=TRUE, cache=FALSE,dependson="cr_edgeSet">>=
edgeODP <- odp(edgeObj, bs.its=10, verbose=FALSE, n.mods=20)
@
The argument {\tt bs.its} controls the number of bootstrap iterations, {\tt verbose} prints the iteration step and {\tt n.mods} is the number of clusters formed. If {\tt n.mods} is equal to the number of genes than the full Optimal Discovery Procedures is used.

To summarize the object using the {\tt odp} method:
<<tt, dependson=c("kd_2", "kd_3")>>=
summary(edgeODP)
@
Using {\tt plot} and {\tt hist} functions on the {\tt qvalue} object:
<<fig.width=6, fig.height=4>>=
qval <- qvalue.obj(edgeODP)
plot(qval)
hist(qval)
@
We notice that the optimal discovery method finds more significant genes. As shown in previous research by Storey \cite{storey:2007}, the ODP finds more significant genes for a fixed FDR when compared to the likelihood ratio test and other popular statistical methods.

\subsection{Using the sva package}
{\tt edge} uses the sva package in the function {\tt edgeSVA}. An example of how to use this on the {\tt kidney} dataset:
<<sva>>=
newEdgeObj <- edgeSVA(edgeObj, n.sv=5, B=10)
@
A new {\tt edgeObj} is created that includes the surrogate variables in the null and full matrices from sva. To access the new matrices:
<<sva_matrices>>=
fullMod <- fullMatrix(newEdgeObj)
nullMod <- nullMatrix(newEdgeObj)
@
See {\tt ?sva} for additional input parameters in {\tt edgeSVA}.

\subsection{Advanced topic: Using the ExpressionSet object}
The {\tt ExpressionSet} object is another alternative to using {\tt edge} but requires a deeper understanding of R and statistics. Let's create an {\tt ExpressionSet} object from the {\tt kidney} dataset:  
<<kidney_expSet, tidy=FALSE, eval=TRUE, dependson=c("crtx","import_data")>>==
library(edge)
anonDf <- as(data.frame(age=age, sex=sex), "AnnotatedDataFrame")
expSet <- ExpressionSet(assayData = kidexpr,
                        phenoData = anonDf)
@
{\tt expSet} contains the expression measurements and the covariates of the experiment. To access the expression values, one can use the function {\tt exprs(expSet)} or to access the covariates, {\tt pData(expSet)}. The {\tt ExpressionSet} class is a widely used object in Bioconductor and more information can be found \url{http://www.bioconductor.org/packages/2.14/bioc/html/Biobase.html}. 

In the {\tt kidney} experiment they were interested in finding the effect of age on gene expression. In this case, we handle the time variable, {\tt age}, by fitting a natural spline curve \cite{storey:etal:2005}. The relevant models for the experiment can be written as
<<kidneyModel>>=
library(splines)
nullMod <- ~-1 + sex
altMod <- ~-1 + sex + ns(age, intercept=FALSE, df=4)
@
Where {\tt nullMod} is the null model and {\tt altMod} is the alternative model. The {\tt sex} covariate is an adjustment variable while {\tt age} is the biological variable of interest. It is important to note that it is necessary to include the adjustment variables in the formulation of the alternative models as done above.

Having both {\tt expSet} and the hypothesis models, {\tt edgeSet} can then be used to create an {\tt edgeSet} object:
<<cr_edgeSet, eval=TRUE, dependson=c("kidneyModel","kidney_expSet")>>==
edgeObj <- edgeSet(expSet, full.model=altMod, null.model=nullMod)
@

We can now simply run {\tt odp}, {\tt lrt} or {\tt edgeFit} as in the previous example.
\section*{Acknowledgements}
This software development has been supported in part by funding from the National Institutes of Health and the Office of Naval Research.

\bibliographystyle{acm}
\bibliography{edgerefs}
\end{document}
